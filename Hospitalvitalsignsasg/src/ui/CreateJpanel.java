/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Patient;
import model.Person;
import model.personList;
//import model.Main;

/**
 *
 * @author ruchachauthai
 */
public class CreateJpanel extends javax.swing.JPanel {
 personList AllpersonList;
    /**
     * Creates new form CreateJpanel
     */
      Patient PatientList;
    public CreateJpanel(personList AllpersonList) {
        initComponents();
        this.filterRow();
//        System.out.println(this.AllpersonList.getAllpersonList());
//       if(this.AllpersonList != null){
       
//       }
         this.AllpersonList = AllpersonList;
          populatePatientTable();
         //here
         
       // this.PatientList = PatientList;
    }
    

//    CreateJpanel(Main main) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        City = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        HeartRate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        BP = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Age = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Community = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        RespRate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        weight = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        searchdropdown = new javax.swing.JComboBox<>();
        searchfield = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        Errormsg = new javax.swing.JLabel();
        txtTotalCount = new javax.swing.JTextField();

        jButton5.setText("jButton5");

        setBackground(new java.awt.Color(51, 51, 51));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BOSTON CITY HOSPITAL");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Name");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("City");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("HeartRate");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Systolic blood pressure");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Age");

        Age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgeActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Community");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Diastolic Blood Pressure");

        RespRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RespRateActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Mobile Number");

        weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 102, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("View");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 102, 255));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 102, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IdentificationNo", "Name", "Age", "City", "Community", "HeartRate", "Diastolic Blood Pressure", "Systolic Blood pressure", "MobileNo", "HealthStatus"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));

        searchdropdown.setBackground(new java.awt.Color(102, 102, 255));
        searchdropdown.setForeground(new java.awt.Color(255, 255, 255));
        searchdropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select field to search", "HealthStatus", "City", "Age", "Community", "Name" }));
        searchdropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchdropdownActionPerformed(evt);
            }
        });

        searchfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchfieldActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(102, 102, 255));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Blood Pressure Abnormal Community Count");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        Errormsg.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jButton1)
                            .addComponent(jLabel1))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(HeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(240, 240, 240)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jButton2)
                                            .addComponent(BP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(166, 166, 166)
                                                .addComponent(jButton3)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Errormsg)
                                                    .addComponent(jLabel9))))))
                                .addGap(54, 54, 54))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(272, 272, 272)
                                    .addComponent(searchdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(22, 22, 22))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Community)
                            .addComponent(RespRate)
                            .addComponent(Age)
                            .addComponent(weight, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(searchfield)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addGap(13, 13, 13)))
                .addContainerGap(465, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(txtTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Age, BP, City, Community, HeartRate, RespRate, patientName, weight});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(Age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(Community, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(HeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(RespRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(BP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Errormsg)
                                .addGap(6, 6, 6)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3)
                                .addComponent(jButton4)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(searchdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(txtTotalCount))
                .addGap(171, 171, 171))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Age, BP, City, Community, HeartRate, RespRate, patientName, weight});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

    }// </editor-fold>//GEN-END:initComponents

    private void AgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgeActionPerformed

    private void RespRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RespRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RespRateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
      //  HashMap<String,Integer> Person = new HashMap<>();
     //   Person.put(,);
    //  Patient patient = PatientList.;
    // Person check1 = AllpersonList.getAllpersonList().stream().filter(personList -> patientName.getText().trim()==personList.getPatientName()).findFirst().orElse(null);
         Person check1 = AllpersonList.getAllpersonList().stream().filter(personList -> Integer.parseInt(weight.getText().trim())==personList.getWeight()).findFirst().orElse(null);    
            if (check1 != null) {
                JOptionPane.showMessageDialog(this, "Person already registered.Please Add Encounter!");
            }
            else{
      Person person = AllpersonList.addPerson();
        person.setPatientName(patientName.getText());
        //patient.setAge(Age.getText().trim());
        person.setAge(Integer.parseInt(Age.getText()));
        
       // patient.setModelNumber(Integer.parseInt(modelNumber.getText().trim()));
        person.setCity(City.getText().trim());
        person.setHeartRate(Integer.parseInt(HeartRate.getText()));
        person.setRespRate(Integer.parseInt(RespRate.getText()));
        person.setBP(Integer.parseInt(BP.getText()));
        person.setWeight(Integer.parseInt(weight.getText()));
        
        person.setCommunity(Community.getText());
//        patient.setAvailability(availability.getText().trim());
//        patient.setYearOfManufacture(yearOfManufacture.getText().trim());
//        patient.setCity(city.getText().trim());
        // car.setCarType(carType.getText());
        JOptionPane.showMessageDialog(this,"Person added successfully!","Info",JOptionPane.INFORMATION_MESSAGE);

        this.populatePatientTable();
        
        patientName.setText(" ");
        Age.setText(" ");
        City.setText(" ");
        HeartRate.setText(" ");
        RespRate.setText(" ");
        BP.setText(" ");
        weight.setText(" ");
        Community.setText(" ");
    }
//        yearOfManufacture.setText(" ");
//        city.setText(" ");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        if(selectedRow<0) {
            JOptionPane.showMessageDialog(this,"Please select a row to view.");
            return;
        }
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
       System.out.print(model.getValueAt(selectedRow,0));
//        Person selectedPerson= (Person)model.getValueAt(selectedRow,0);
        Person selectedPerson = AllpersonList.getAllpersonList().get(selectedRow);
        
        patientName.setText(selectedPerson.getPatientName());
        
         Age.setText(String.valueOf(selectedPerson.getAge()));
        City.setText(selectedPerson.getCity());
        HeartRate.setText(String.valueOf(selectedPerson.getHeartRate()));
         RespRate.setText(String.valueOf(selectedPerson.getRespRate()));
       
        BP.setText(String.valueOf(selectedPerson.getBP()));
        weight.setText(String.valueOf(selectedPerson.getWeight()));
        Community.setText(selectedPerson.getCommunity());
//        yearOfManufacture.setText(String.valueOf(selectedPerson.getYearOfManufacture()));
//        city.setText(selectedPerson.getCity());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        if(selectedRow<0) {
            JOptionPane.showMessageDialog(this,"Please select a row to update.");
            return;
        }
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
       // Person selectedPerson= (Person)model.getValueAt(selectedRow,0);
       Person selectedPerson = AllpersonList.getAllpersonList().get(selectedRow);
        
        
        AllpersonList.getAllpersonList().get(selectedRow).setPatientName(patientName.getText().trim());
        AllpersonList.getAllpersonList().get(selectedRow).setCity(City.getText().trim());
         AllpersonList.getAllpersonList().get(selectedRow).setAge(Integer.parseInt(Age.getText().trim()));
        AllpersonList.getAllpersonList().get(selectedRow).setHeartRate(Integer.parseInt(HeartRate.getText().trim()));
        AllpersonList.getAllpersonList().get(selectedRow).setRespRate(Integer.parseInt(RespRate.getText().trim()));
        AllpersonList.getAllpersonList().get(selectedRow).setBP(Integer.parseInt(BP.getText().trim()));
         AllpersonList.getAllpersonList().get(selectedRow).setWeight(Integer.parseInt(weight.getText().trim()));
         AllpersonList.getAllpersonList().get(selectedRow).setCommunity(Community.getText().trim());
         
//        AllpersonList.getAllpersonList().get(selectedRow).setMaintenanceExpDate(maintenanceExpDate.getText().trim());
//        AllpersonList.getAllpersonList().get(selectedRow).setAvailability(availability.getText().trim());
//        AllpersonList.getAllpersonList().get(selectedRow).setYearOfManufacture(yearOfManufacture.getText().trim());
//        AllpersonList.getAllpersonList().get(selectedRow).setCity(city.getText().trim());
             populatePatientTable();
         JOptionPane.showMessageDialog(this," Details updated successfully!","Info",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed
private void filterRow(){
   // System.out.println("inside");
    TableModel myTableModel = jTable1.getModel();
    final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(myTableModel);
    jTable1.setRowSorter(sorter);
    searchfield.getDocument().addDocumentListener(new DocumentListener(){
    private void searchUpdate(DocumentEvent evt){
    int index =0;
    String option = searchdropdown.getSelectedItem().toString();
    switch(option){
        
                        case "HealthStatus": index=9;
                        break;
                        case "City": index=3;
                        break;
                        case "Community": index=4;
                        break;
                        case "Age": index=2;
                        break;
                        case "Name": index=1;
                        break;
//                        case "Year of Manufacturing": index=8;
//                        break;
//                        case "City": index=9;
//                        break;
//                        case "Car Type": index=0;
//                        break;
//                        case "Availability": index=7;
//                        break;
//                        case "Maintenance Expiry": index=3;
//                        break;
                       // row[1]=car.getModelName();
//     row[2]=car.getModelNumber();
//     row[3]=car.getMaintenanceExpDate();
//     row[4]=car.getCarmanufacturer();
//     row[5]=car.getNumberOfseats();
//     row[6]=car.getSerialNumber();
//     row[7]=car.getAvailability();
//     row[8]=car.getYearOfManufacture();
//     row[9]=car.getCity();
//                        case "maintenanceExpDate": index=6;
//                        break;
//                        case "availability": index=7;
//                        break;
//                        case "yearOfManufacture": index=8;
//                        break;
//                        case "city": index=9;
//                        break;
        
    }
    String txt =searchfield.getText();
    
    if(txt.length()==0)
    {
        sorter.setRowFilter(null);
        jTable1.clearSelection();
    }
    else
    {
        try
        {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)"+txt,index));
     //   sorter.setRowFilter(RowFilter.regexFilter("(?i)")+txt, index);
       
            if(index==4)
            {
                int count;
                count=0;
                for(Person person: AllpersonList.getAllpersonList())
                {
                        //System.out.println(person.getCommunity()+"here"+txt);
                       //System.out.println(person.getCommunity().equals(txt));
                        if(person.getCommunity().equals(txt)&& !(person.getBP() < 120 && person.getRespRate() < 80) )
                        {
                            //System.out.println(count+"insidseif");
                            count++;
                        }
                        txtTotalCount.setText(Integer.toString(count));
         
                }
      
                System.out.println(count+"countis");
            }
         jTable1.clearSelection();
        }
        catch(PatternSyntaxException pse){
        JOptionPane.showMessageDialog(null,"Bad regex pattern","Bad regex pattern",JOptionPane.ERROR_MESSAGE);
        }
    }
    }
    @Override
    public void insertUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    @Override
    public void removeUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    @Override
    public void changedUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    });
}
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if(selectedRow<0) {
            JOptionPane.showMessageDialog(this,"Please select a row to delete.");
            return;
        }
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
//        Person selectedCar= (Person)model.getValueAt(selectedRow,0);
        Person selectedPerson = AllpersonList.getAllpersonList().get(selectedRow);        

        AllpersonList.delete(selectedPerson);
        populatePatientTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void searchfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchfieldActionPerformed

    private void searchdropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchdropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchdropdownActionPerformed

    private void weightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightActionPerformed
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{0,10}$";
        Pattern pattern = Pattern.compile(PATTERN);
        Matcher match = pattern.matcher(weight.getText());
        if(!match.matches())
        {
            Errormsg.setText("Mobile Number is incorrect!");
        }
        else{
            Errormsg.setText(null);
        }
    }//GEN-LAST:event_weightActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(this,"Abnormal Count for selected community : +this.count");
    }//GEN-LAST:event_jButton6ActionPerformed
private void populatePatientTable(){
DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
   model.setRowCount(0);
  // if(this.AllpersonList.getAllpersonList().size() != 0){
   //this.AllpersonList.getAllpersonList()
    int i=0;
    for(Person person: AllpersonList.getAllpersonList()){
     Object row[] = new Object [11];
    // row[0]=person.getPatientName();
    row[0]=i+ 1;
     row[1]=person.getPatientName();
     row[2]=person.getAge();
     row[3]=person.getCity();
     row[4]=person.getCommunity();
     row[5]=person.getHeartRate();
     row[6]=person.getRespRate();
     row[7]=person.getBP();
     row[8]=person.getWeight();
     //&& person.getHeartRate() > 60 && person.getHeartRate() <100
     if(person.getBP() < 120 && person.getRespRate() < 80  ){
     row[9]="Normal";
     
     }
     else{
         row[9]="Abnormal";
     }
//     row[8]=car.getYearOfManufacture();
//     row[9]=car.getCity();
i++;
     model.addRow(row);
   }
//}
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Age;
    private javax.swing.JTextField BP;
    private javax.swing.JTextField City;
    private javax.swing.JTextField Community;
    private javax.swing.JLabel Errormsg;
    private javax.swing.JTextField HeartRate;
    private javax.swing.JTextField RespRate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField patientName;
    private javax.swing.JComboBox<String> searchdropdown;
    private javax.swing.JTextField searchfield;
    private javax.swing.JTextField txtTotalCount;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables
}
