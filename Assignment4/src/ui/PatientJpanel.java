/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.regex.PatternSyntaxException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.PatientHistory;
import model.VitalSigns;
import model.PatientHistory;
import model.Person;

/**
 *
 * @author ruchachauthai
 */
public class PatientJpanel extends javax.swing.JPanel {
PatientHistory AllVitalSigns;
    /**
     * Creates new form PatientJpanel
     */
  //  personList AllpersonList;
    public PatientJpanel(PatientHistory AllVitalSigns) {
        initComponents();
        this.AllVitalSigns = AllVitalSigns;
        populatePatientTable();
        filterRow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BP = new javax.swing.JTextField();
        HeartRate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        RespRate = new javax.swing.JTextField();
        weight = new javax.swing.JTextField();
        searchdropdown = new javax.swing.JComboBox<>();
        searchfield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        EncDate = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 51));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Encounter results: Vital Signs");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Search Patient");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "EncounterDate", "HeartRate", "RespRate", "BP", "HouseNumber", "Diagnosis"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("HeartRate");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Systolic Blood Pressure");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("HouseNumber");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Diastolic Blood Pressure");

        searchdropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Date", "Blood Pressure Condition" }));

        searchfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchfieldActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Name");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Date");

        EncDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncDateActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ADD ENCOUNTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8))
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(RespRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(EncDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addComponent(jButton1)))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {BP, EncDate, HeartRate, RespRate, patientName, weight});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(EncDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(RespRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BP, EncDate, HeartRate, RespRate, patientName, weight});

    }// </editor-fold>//GEN-END:initComponents

    private void searchfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchfieldActionPerformed

    private void EncDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EncDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        VitalSigns vitalSigns = AllVitalSigns.addVitalSigns();
        vitalSigns.setPatientName(patientName.getText());
        vitalSigns.setEncDate(EncDate.getText());
        //patient.setAge(Age.getText().trim());
       // vitalSigns.setAge(Integer.parseInt(Age.getText()));
        
       // patient.setModelNumber(Integer.parseInt(modelNumber.getText().trim()));
        //vitalSigns.setCity(City.getText().trim());
        vitalSigns.setHeartRate(Integer.parseInt(HeartRate.getText()));
        vitalSigns.setRespRate(Integer.parseInt(RespRate.getText()));
        vitalSigns.setBP(Integer.parseInt(BP.getText()));
        vitalSigns.setWeight(Integer.parseInt(weight.getText()));
        
      //  vitalSigns.setCommunity(Community.getText());
//        patient.setAvailability(availability.getText().trim());
//        patient.setYearOfManufacture(yearOfManufacture.getText().trim());
//        patient.setCity(city.getText().trim());
        // car.setCarType(carType.getText());
        JOptionPane.showMessageDialog(this,"Encounter Details added successfully!","Info",JOptionPane.INFORMATION_MESSAGE);

        this.populatePatientTable();
        
        patientName.setText("");
        EncDate.setText("");
//        Age.setText(" ");
//        City.setText(" ");
        HeartRate.setText("");
        RespRate.setText("");
        BP.setText("");
        weight.setText("");
//        Community.setText(" ");
    }//GEN-LAST:event_jButton1ActionPerformed

private void populatePatientTable(){
DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
   model.setRowCount(0);
  // if(this.AllpersonList.getAllpersonList().size() != 0){
   //this.AllpersonList.getAllpersonList()
   // int i=0;
    for(VitalSigns vitalSigns: AllVitalSigns.getAllPatientHistory()){
     Object row[] = new Object [7];
    // row[0]=person.getPatientName();
  //  row[0]=i+ 1;
     row[0]=vitalSigns.getPatientName();
     row[1]=vitalSigns.getEncDate();
    // row[3]=vitalSigns.getCity();
    // row[4]=vitalSigns.getCommunity();
     row[2]=vitalSigns.getHeartRate();
     row[3]=vitalSigns.getRespRate();
     row[4]=vitalSigns.getBP();
     row[5]=vitalSigns.getWeight();
     if(vitalSigns.getBP() < 120 && vitalSigns.getRespRate() < 80){
     row[6]="Normal Blood Pressure";
     
     }
     else if(vitalSigns.getBP() >= 120 && vitalSigns.getBP() < 139 && vitalSigns.getRespRate() >= 80 && vitalSigns.getRespRate() <= 89 ){
         row[6]="Elevated Blood pressure- At Risk";
     }
      else if(vitalSigns.getBP() >= 140 && vitalSigns.getRespRate() >= 90  ){
         row[6]="Hight Blood pressure- Hypertension";
     }
     else{
         row[6]="Abnormal-Please consult Doctor.";
     }
//     row[8]=car.getYearOfManufacture();
//     row[9]=car.getCity();
//i++;
     model.addRow(row);
   }
//}
}
private void filterRow(){
   // System.out.println("inside");
    TableModel myTableModel = jTable2.getModel();
    final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(myTableModel);
    jTable2.setRowSorter(sorter);
    searchfield.getDocument().addDocumentListener(new DocumentListener(){
    private void searchUpdate(DocumentEvent evt){
    int index =0;
    String option = searchdropdown.getSelectedItem().toString();
    switch(option){
        
                        case "Name": index=0;
                        break;
                        case "Date": index=1;
                        break;
                        case "Blood Pressure Condition": index=6;
                        break;
//                        case "M": index=2;
//                        break;
//                        case "Name": index=1;
//                        break;
//                        case "Year of Manufacturing": index=8;
//                        break;
//                        case "City": index=9;
//                        break;
//                        case "Car Type": index=0;
//                        break;
//                        case "Availability": index=7;
//                        break;
//                        case "Maintenance Expiry": index=3;
//                        break;
                       // row[1]=car.getModelName();
//     row[2]=car.getModelNumber();
//     row[3]=car.getMaintenanceExpDate();
//     row[4]=car.getCarmanufacturer();
//     row[5]=car.getNumberOfseats();
//     row[6]=car.getSerialNumber();
//     row[7]=car.getAvailability();
//     row[8]=car.getYearOfManufacture();
//     row[9]=car.getCity();
//                        case "maintenanceExpDate": index=6;
//                        break;
//                        case "availability": index=7;
//                        break;
//                        case "yearOfManufacture": index=8;
//                        break;
//                        case "city": index=9;
//                        break;
        
    }
    String txt =searchfield.getText();
    
    if(txt.length()==0){
    sorter.setRowFilter(null);
    jTable2.clearSelection();
    }else{
        try{
            sorter.setRowFilter(RowFilter.regexFilter("(?i)"+txt,index));
     //   sorter.setRowFilter(RowFilter.regexFilter("(?i)")+txt, index);
       
//        if(index==4){
//        int count;
//        count=0;
//         for(VitalSigns vitalSigns: AllpersonList.getAllpersonList()){
//             //System.out.println(person.getCommunity()+"here"+txt);
//           //  System.out.println(person.getCommunity().equals(txt));
//         if(person.getCommunity().equals(txt)){
//           //  System.out.println(count+"insidseif");
//         count++;
//         }
//         
//         }
         
//         System.out.println(count+"countis");
          //  }
         jTable2.clearSelection();
        }
        catch(PatternSyntaxException pse){
        JOptionPane.showMessageDialog(null,"Bad regex pattern","Bad regex pattern",JOptionPane.ERROR_MESSAGE);
        }
    }
    }
    @Override
    public void insertUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    @Override
    public void removeUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    @Override
    public void changedUpdate(DocumentEvent e){
    searchUpdate(e);
    }
    });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BP;
    private javax.swing.JTextField EncDate;
    private javax.swing.JTextField HeartRate;
    private javax.swing.JTextField RespRate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField patientName;
    private javax.swing.JComboBox<String> searchdropdown;
    private javax.swing.JTextField searchfield;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables

//private void populatePatientTable(){
//DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
//   model.setRowCount(0);
//   
//    
//    for(Person person: AllpersonList.getAllpersonList()){
//     Object row[] = new Object [10];
//     row[0]=person.getPatientName();
    // row[1]=person.getPatientName();
//     row[1]=person.getAge();
//     row[2]=person.getCity();
//     row[3]=person.getCommunity();

//     row[1]=person.getHeartRate();
//     row[5]=person.getRespRate();
//     row[6]=person.getBP();
//     row[7]=person.getWeight();
//     if(person.getHeartRate() > 50){
//     row[8]="Normal";
//     }
//     else{
//         row[8]="Abnormal";
//     }
//     row[8]=car.getYearOfManufacture();
//     row[9]=car.getCity();
//     model.addRow(row);
//   }
//}
}
